name: "TDD Strict Workflow (Advanced)"
description: "STRICT TDD-only workflow - no planning phase, pure test-driven development for experienced devs"
version: "1.0.0"

triggers:
  keywords: ["tdd-strict", "pure-tdd", "test-first"]
  complexity: ["small", "medium"]
  approach: "tdd-strict"
  experience_level: "advanced"

phases:
  - id: "load-context"
    name: "Load Context"
    plugin: "ald"
    hook: "load-memory"
    required: true
    description: "Load project context and tech stack"

  - id: "sprint-check"
    name: "Sprint Check"
    plugin: "ald"
    hook: "sprint-check"
    required: true
    description: "Verify feature is in scope of active sprint"

  - id: "find-policies"
    name: "Find Policies"
    plugin: "ald"
    hook: "policy-finder"
    required: true
    description: "Identify relevant policies for implementation"

  - id: "tdd-cycle"
    name: "TDD Red-Green-Refactor"
    plugin: "superpowers-dev"
    hook: "test-driven-development"
    required: true
    description: "Write failing test → minimal implementation → refactor"
    cycle:
      - "RED: Write failing test"
      - "Verify RED: Watch test fail correctly"
      - "GREEN: Write minimal code to pass"
      - "Verify GREEN: Watch test pass"
      - "REFACTOR: Clean up code (keep tests green)"
      - "Repeat for next feature"
    rules:
      - "NO PRODUCTION CODE WITHOUT FAILING TEST FIRST"
      - "Test must fail for expected reason (not errors)"
      - "Write minimal code (no over-engineering)"
      - "All tests must pass before refactor"
      - "Never skip watching tests fail/pass"

  - id: "defense-in-depth"
    name: "Add Validation Layers"
    plugin: "superpowers-dev"
    hook: "defense-in-depth"
    required: true
    description: "Add validation at multiple layers"
    layers:
      - "entry_point_validation"
      - "business_logic_validation"
      - "environment_guards"
      - "debug_logging"

  - id: "validate"
    name: "E2E Validation"
    plugin: "ald"
    hook: "tester"
    required: true
    description: "Validate feature works from user perspective"
    checks:
      - "Unit tests pass"
      - "Integration tests pass"
      - "Console clean (0 errors)"
      - "Network requests OK"
      - "UX validation (real user flow)"
      - "Edge cases covered"

  - id: "review"
    name: "Code Review"
    plugin: "ald"
    hook: "code-reviewer"
    required: true
    description: "Review implementation against plan and policies"

  - id: "learn"
    name: "Capture Learning"
    plugin: "ald"
    hook: "curator"
    required: false
    description: "Update memory and policies based on learnings"
    when: "task_list_complete"

estimated_duration: "45-90 minutes"
notes: "STRICT TDD-only workflow for advanced users. No planning phase - jump straight into test-first development. Use this when you already know what to build and want pure TDD discipline. For most features, use feature-full or feature-quick (they now include TDD by default)."

quality_gates:
  - "Every function has a test that failed first"
  - "All tests pass (100%)"
  - "Console pristine (0 errors)"
  - "Edge cases covered (null, empty, invalid)"
  - "Code documented (file headers, comments)"
  - "Policies followed"

red_flags:
  - "Test passes immediately (didn't watch fail)"
  - "Code written before test"
  - "Tests added 'later'"
  - "Can't explain why test failed"
  - "Rationalizing 'just this once'"
